// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: tiger.proto

package prototiger

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Node_Type int32

const (
	Node_NODE_GROUP Node_Type = 0
	Node_GENERATOR  Node_Type = 1
	Node_ALTERNATOR Node_Type = 2
	Node_CONVERTER  Node_Type = 3
	Node_STORAGE    Node_Type = 4
)

// Enum value maps for Node_Type.
var (
	Node_Type_name = map[int32]string{
		0: "NODE_GROUP",
		1: "GENERATOR",
		2: "ALTERNATOR",
		3: "CONVERTER",
		4: "STORAGE",
	}
	Node_Type_value = map[string]int32{
		"NODE_GROUP": 0,
		"GENERATOR":  1,
		"ALTERNATOR": 2,
		"CONVERTER":  3,
		"STORAGE":    4,
	}
)

func (x Node_Type) Enum() *Node_Type {
	p := new(Node_Type)
	*p = x
	return p
}

func (x Node_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_tiger_proto_enumTypes[0].Descriptor()
}

func (Node_Type) Type() protoreflect.EnumType {
	return &file_tiger_proto_enumTypes[0]
}

func (x Node_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node_Type.Descriptor instead.
func (Node_Type) EnumDescriptor() ([]byte, []int) {
	return file_tiger_proto_rawDescGZIP(), []int{0, 0}
}

type Measurement_Type int32

const (
	Measurement_VOLTAGE     Measurement_Type = 0
	Measurement_CURRENT     Measurement_Type = 1
	Measurement_POWER       Measurement_Type = 2
	Measurement_FREQUENCY   Measurement_Type = 3
	Measurement_TEMPERATURE Measurement_Type = 4
)

// Enum value maps for Measurement_Type.
var (
	Measurement_Type_name = map[int32]string{
		0: "VOLTAGE",
		1: "CURRENT",
		2: "POWER",
		3: "FREQUENCY",
		4: "TEMPERATURE",
	}
	Measurement_Type_value = map[string]int32{
		"VOLTAGE":     0,
		"CURRENT":     1,
		"POWER":       2,
		"FREQUENCY":   3,
		"TEMPERATURE": 4,
	}
)

func (x Measurement_Type) Enum() *Measurement_Type {
	p := new(Measurement_Type)
	*p = x
	return p
}

func (x Measurement_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Measurement_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_tiger_proto_enumTypes[1].Descriptor()
}

func (Measurement_Type) Type() protoreflect.EnumType {
	return &file_tiger_proto_enumTypes[1]
}

func (x Measurement_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Measurement_Type.Descriptor instead.
func (Measurement_Type) EnumDescriptor() ([]byte, []int) {
	return file_tiger_proto_rawDescGZIP(), []int{1, 0}
}

type Status_Type int32

const (
	Status_BREAKER     Status_Type = 0
	Status_TRANSFORMER Status_Type = 1
	Status_GENERATOR   Status_Type = 2
)

// Enum value maps for Status_Type.
var (
	Status_Type_name = map[int32]string{
		0: "BREAKER",
		1: "TRANSFORMER",
		2: "GENERATOR",
	}
	Status_Type_value = map[string]int32{
		"BREAKER":     0,
		"TRANSFORMER": 1,
		"GENERATOR":   2,
	}
)

func (x Status_Type) Enum() *Status_Type {
	p := new(Status_Type)
	*p = x
	return p
}

func (x Status_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_tiger_proto_enumTypes[2].Descriptor()
}

func (Status_Type) Type() protoreflect.EnumType {
	return &file_tiger_proto_enumTypes[2]
}

func (x Status_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status_Type.Descriptor instead.
func (Status_Type) EnumDescriptor() ([]byte, []int) {
	return file_tiger_proto_rawDescGZIP(), []int{2, 0}
}

type ControlCommand_CommandType int32

const (
	ControlCommand_OPEN_BREAKER        ControlCommand_CommandType = 0
	ControlCommand_CLOSE_BREAKER       ControlCommand_CommandType = 1
	ControlCommand_INCREASE_GENERATION ControlCommand_CommandType = 2
	ControlCommand_DECREASE_GENERATION ControlCommand_CommandType = 3
)

// Enum value maps for ControlCommand_CommandType.
var (
	ControlCommand_CommandType_name = map[int32]string{
		0: "OPEN_BREAKER",
		1: "CLOSE_BREAKER",
		2: "INCREASE_GENERATION",
		3: "DECREASE_GENERATION",
	}
	ControlCommand_CommandType_value = map[string]int32{
		"OPEN_BREAKER":        0,
		"CLOSE_BREAKER":       1,
		"INCREASE_GENERATION": 2,
		"DECREASE_GENERATION": 3,
	}
)

func (x ControlCommand_CommandType) Enum() *ControlCommand_CommandType {
	p := new(ControlCommand_CommandType)
	*p = x
	return p
}

func (x ControlCommand_CommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlCommand_CommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_tiger_proto_enumTypes[3].Descriptor()
}

func (ControlCommand_CommandType) Type() protoreflect.EnumType {
	return &file_tiger_proto_enumTypes[3]
}

func (x ControlCommand_CommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlCommand_CommandType.Descriptor instead.
func (ControlCommand_CommandType) EnumDescriptor() ([]byte, []int) {
	return file_tiger_proto_rawDescGZIP(), []int{3, 0}
}

// A node can send mesurements, recieve controll commands and has a status.
// It is a part of a network therefor it has related nodes
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type         Node_Type         `protobuf:"varint,2,opt,name=type,proto3,enum=prototiger.Node_Type" json:"type,omitempty"`
	Neighbours   map[string]*Node  `protobuf:"bytes,3,rep,name=neighbours,proto3" json:"neighbours,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status       *Status           `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Measurements []*Measurement    `protobuf:"bytes,5,rep,name=measurements,proto3" json:"measurements,omitempty"`
	Commands     []*ControlCommand `protobuf:"bytes,6,rep,name=commands,proto3" json:"commands,omitempty"`
	X            float32           `protobuf:"fixed32,7,opt,name=x,proto3" json:"x,omitempty"`
	Y            float32           `protobuf:"fixed32,8,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tiger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_tiger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_tiger_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetType() Node_Type {
	if x != nil {
		return x.Type
	}
	return Node_NODE_GROUP
}

func (x *Node) GetNeighbours() map[string]*Node {
	if x != nil {
		return x.Neighbours
	}
	return nil
}

func (x *Node) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Node) GetMeasurements() []*Measurement {
	if x != nil {
		return x.Measurements
	}
	return nil
}

func (x *Node) GetCommands() []*ControlCommand {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *Node) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Node) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

// A measurement can include data such as voltage, current, power, frequency, etc.
type Measurement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      Measurement_Type     `protobuf:"varint,1,opt,name=type,proto3,enum=prototiger.Measurement_Type" json:"type,omitempty"`
	Value     float64              `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Measurement) Reset() {
	*x = Measurement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tiger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Measurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Measurement) ProtoMessage() {}

func (x *Measurement) ProtoReflect() protoreflect.Message {
	mi := &file_tiger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Measurement.ProtoReflect.Descriptor instead.
func (*Measurement) Descriptor() ([]byte, []int) {
	return file_tiger_proto_rawDescGZIP(), []int{1}
}

func (x *Measurement) GetType() Measurement_Type {
	if x != nil {
		return x.Type
	}
	return Measurement_VOLTAGE
}

func (x *Measurement) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Measurement) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Status can represent the state of various components like breakers, transformers, etc.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      Status_Type          `protobuf:"varint,1,opt,name=type,proto3,enum=prototiger.Status_Type" json:"type,omitempty"`
	IsActive  bool                 `protobuf:"varint,2,opt,name=isActive,proto3" json:"isActive,omitempty"`
	IsAlarmed bool                 `protobuf:"varint,3,opt,name=isAlarmed,proto3" json:"isAlarmed,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tiger_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_tiger_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_tiger_proto_rawDescGZIP(), []int{2}
}

func (x *Status) GetType() Status_Type {
	if x != nil {
		return x.Type
	}
	return Status_BREAKER
}

func (x *Status) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Status) GetIsAlarmed() bool {
	if x != nil {
		return x.IsAlarmed
	}
	return false
}

func (x *Status) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Control commands are used to control devices within the electrical network.
type ControlCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandType    ControlCommand_CommandType `protobuf:"varint,1,opt,name=commandType,proto3,enum=prototiger.ControlCommand_CommandType" json:"commandType,omitempty"`
	TargetDeviceId string                     `protobuf:"bytes,2,opt,name=targetDeviceId,proto3" json:"targetDeviceId,omitempty"`
	Timestamp      *timestamp.Timestamp       `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ControlCommand) Reset() {
	*x = ControlCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tiger_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlCommand) ProtoMessage() {}

func (x *ControlCommand) ProtoReflect() protoreflect.Message {
	mi := &file_tiger_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlCommand.ProtoReflect.Descriptor instead.
func (*ControlCommand) Descriptor() ([]byte, []int) {
	return file_tiger_proto_rawDescGZIP(), []int{3}
}

func (x *ControlCommand) GetCommandType() ControlCommand_CommandType {
	if x != nil {
		return x.CommandType
	}
	return ControlCommand_OPEN_BREAKER
}

func (x *ControlCommand) GetTargetDeviceId() string {
	if x != nil {
		return x.TargetDeviceId
	}
	return ""
}

func (x *ControlCommand) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// This can represent the entire system state at a specific point in time.
type SystemSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measurements []*Measurement       `protobuf:"bytes,1,rep,name=measurements,proto3" json:"measurements,omitempty"`
	Statuses     []*Status            `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
	Timestamp    *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SystemSnapshot) Reset() {
	*x = SystemSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tiger_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSnapshot) ProtoMessage() {}

func (x *SystemSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_tiger_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSnapshot.ProtoReflect.Descriptor instead.
func (*SystemSnapshot) Descriptor() ([]byte, []int) {
	return file_tiger_proto_rawDescGZIP(), []int{4}
}

func (x *SystemSnapshot) GetMeasurements() []*Measurement {
	if x != nil {
		return x.Measurements
	}
	return nil
}

func (x *SystemSnapshot) GetStatuses() []*Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *SystemSnapshot) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type MonitoringDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId  string               `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	StartTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *MonitoringDataRequest) Reset() {
	*x = MonitoringDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tiger_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitoringDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringDataRequest) ProtoMessage() {}

func (x *MonitoringDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tiger_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoringDataRequest.ProtoReflect.Descriptor instead.
func (*MonitoringDataRequest) Descriptor() ([]byte, []int) {
	return file_tiger_proto_rawDescGZIP(), []int{5}
}

func (x *MonitoringDataRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *MonitoringDataRequest) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *MonitoringDataRequest) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type MonitoringDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measurements []*Measurement `protobuf:"bytes,1,rep,name=measurements,proto3" json:"measurements,omitempty"`
	Statuses     []*Status      `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *MonitoringDataResponse) Reset() {
	*x = MonitoringDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tiger_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitoringDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringDataResponse) ProtoMessage() {}

func (x *MonitoringDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tiger_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoringDataResponse.ProtoReflect.Descriptor instead.
func (*MonitoringDataResponse) Descriptor() ([]byte, []int) {
	return file_tiger_proto_rawDescGZIP(), []int{6}
}

func (x *MonitoringDataResponse) GetMeasurements() []*Measurement {
	if x != nil {
		return x.Measurements
	}
	return nil
}

func (x *MonitoringDataResponse) GetStatuses() []*Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type ControlCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command *ControlCommand `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *ControlCommandRequest) Reset() {
	*x = ControlCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tiger_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlCommandRequest) ProtoMessage() {}

func (x *ControlCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tiger_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlCommandRequest.ProtoReflect.Descriptor instead.
func (*ControlCommandRequest) Descriptor() ([]byte, []int) {
	return file_tiger_proto_rawDescGZIP(), []int{7}
}

func (x *ControlCommandRequest) GetCommand() *ControlCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

type ControlCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ControlCommandResponse) Reset() {
	*x = ControlCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tiger_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlCommandResponse) ProtoMessage() {}

func (x *ControlCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tiger_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlCommandResponse.ProtoReflect.Descriptor instead.
func (*ControlCommandResponse) Descriptor() ([]byte, []int) {
	return file_tiger_proto_rawDescGZIP(), []int{8}
}

func (x *ControlCommandResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ControlCommandResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_tiger_proto protoreflect.FileDescriptor

var file_tiger_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x03, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x2a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x1a, 0x4f, 0x0a, 0x0f, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x4f, 0x52,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x04, 0x22, 0xdc,
	0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x4b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x4f, 0x4c, 0x54,
	0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x04, 0x22, 0xde, 0x01,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69,
	0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x33, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x22, 0xa2,
	0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x64, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45,
	0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x22, 0xb7, 0x01, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xa3, 0x01,
	0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x15, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x4c, 0x0a, 0x16, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x90, 0x02, 0x0a, 0x0c, 0x53, 0x63, 0x61,
	0x64, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x0e, 0x5a, 0x0c, 0x2e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_tiger_proto_rawDescOnce sync.Once
	file_tiger_proto_rawDescData = file_tiger_proto_rawDesc
)

func file_tiger_proto_rawDescGZIP() []byte {
	file_tiger_proto_rawDescOnce.Do(func() {
		file_tiger_proto_rawDescData = protoimpl.X.CompressGZIP(file_tiger_proto_rawDescData)
	})
	return file_tiger_proto_rawDescData
}

var file_tiger_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_tiger_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_tiger_proto_goTypes = []interface{}{
	(Node_Type)(0),                  // 0: prototiger.Node.Type
	(Measurement_Type)(0),           // 1: prototiger.Measurement.Type
	(Status_Type)(0),                // 2: prototiger.Status.Type
	(ControlCommand_CommandType)(0), // 3: prototiger.ControlCommand.CommandType
	(*Node)(nil),                    // 4: prototiger.Node
	(*Measurement)(nil),             // 5: prototiger.Measurement
	(*Status)(nil),                  // 6: prototiger.Status
	(*ControlCommand)(nil),          // 7: prototiger.ControlCommand
	(*SystemSnapshot)(nil),          // 8: prototiger.SystemSnapshot
	(*MonitoringDataRequest)(nil),   // 9: prototiger.MonitoringDataRequest
	(*MonitoringDataResponse)(nil),  // 10: prototiger.MonitoringDataResponse
	(*ControlCommandRequest)(nil),   // 11: prototiger.ControlCommandRequest
	(*ControlCommandResponse)(nil),  // 12: prototiger.ControlCommandResponse
	nil,                             // 13: prototiger.Node.NeighboursEntry
	(*timestamp.Timestamp)(nil),     // 14: google.protobuf.Timestamp
	(*empty.Empty)(nil),             // 15: google.protobuf.Empty
}
var file_tiger_proto_depIdxs = []int32{
	0,  // 0: prototiger.Node.type:type_name -> prototiger.Node.Type
	13, // 1: prototiger.Node.neighbours:type_name -> prototiger.Node.NeighboursEntry
	6,  // 2: prototiger.Node.status:type_name -> prototiger.Status
	5,  // 3: prototiger.Node.measurements:type_name -> prototiger.Measurement
	7,  // 4: prototiger.Node.commands:type_name -> prototiger.ControlCommand
	1,  // 5: prototiger.Measurement.type:type_name -> prototiger.Measurement.Type
	14, // 6: prototiger.Measurement.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 7: prototiger.Status.type:type_name -> prototiger.Status.Type
	14, // 8: prototiger.Status.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 9: prototiger.ControlCommand.commandType:type_name -> prototiger.ControlCommand.CommandType
	14, // 10: prototiger.ControlCommand.timestamp:type_name -> google.protobuf.Timestamp
	5,  // 11: prototiger.SystemSnapshot.measurements:type_name -> prototiger.Measurement
	6,  // 12: prototiger.SystemSnapshot.statuses:type_name -> prototiger.Status
	14, // 13: prototiger.SystemSnapshot.timestamp:type_name -> google.protobuf.Timestamp
	14, // 14: prototiger.MonitoringDataRequest.startTime:type_name -> google.protobuf.Timestamp
	14, // 15: prototiger.MonitoringDataRequest.endTime:type_name -> google.protobuf.Timestamp
	5,  // 16: prototiger.MonitoringDataResponse.measurements:type_name -> prototiger.Measurement
	6,  // 17: prototiger.MonitoringDataResponse.statuses:type_name -> prototiger.Status
	7,  // 18: prototiger.ControlCommandRequest.command:type_name -> prototiger.ControlCommand
	4,  // 19: prototiger.Node.NeighboursEntry.value:type_name -> prototiger.Node
	9,  // 20: prototiger.ScadaService.GetMonitoringData:input_type -> prototiger.MonitoringDataRequest
	11, // 21: prototiger.ScadaService.SendControlCommand:input_type -> prototiger.ControlCommandRequest
	15, // 22: prototiger.ScadaService.GetSystemSnapshot:input_type -> google.protobuf.Empty
	10, // 23: prototiger.ScadaService.GetMonitoringData:output_type -> prototiger.MonitoringDataResponse
	12, // 24: prototiger.ScadaService.SendControlCommand:output_type -> prototiger.ControlCommandResponse
	8,  // 25: prototiger.ScadaService.GetSystemSnapshot:output_type -> prototiger.SystemSnapshot
	23, // [23:26] is the sub-list for method output_type
	20, // [20:23] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_tiger_proto_init() }
func file_tiger_proto_init() {
	if File_tiger_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tiger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tiger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Measurement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tiger_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tiger_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tiger_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tiger_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitoringDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tiger_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitoringDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tiger_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tiger_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tiger_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tiger_proto_goTypes,
		DependencyIndexes: file_tiger_proto_depIdxs,
		EnumInfos:         file_tiger_proto_enumTypes,
		MessageInfos:      file_tiger_proto_msgTypes,
	}.Build()
	File_tiger_proto = out.File
	file_tiger_proto_rawDesc = nil
	file_tiger_proto_goTypes = nil
	file_tiger_proto_depIdxs = nil
}
