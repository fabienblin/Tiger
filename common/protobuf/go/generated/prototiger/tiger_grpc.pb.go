// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: tiger.proto

package prototiger

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScadaServiceClient is the client API for ScadaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScadaServiceClient interface {
	GetMonitoringData(ctx context.Context, in *MonitoringDataRequest, opts ...grpc.CallOption) (*MonitoringDataResponse, error)
	SendControlCommand(ctx context.Context, in *ControlCommandRequest, opts ...grpc.CallOption) (*ControlCommandResponse, error)
	GetSystemSnapshot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SystemSnapshot, error)
}

type scadaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScadaServiceClient(cc grpc.ClientConnInterface) ScadaServiceClient {
	return &scadaServiceClient{cc}
}

func (c *scadaServiceClient) GetMonitoringData(ctx context.Context, in *MonitoringDataRequest, opts ...grpc.CallOption) (*MonitoringDataResponse, error) {
	out := new(MonitoringDataResponse)
	err := c.cc.Invoke(ctx, "/prototiger.ScadaService/GetMonitoringData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scadaServiceClient) SendControlCommand(ctx context.Context, in *ControlCommandRequest, opts ...grpc.CallOption) (*ControlCommandResponse, error) {
	out := new(ControlCommandResponse)
	err := c.cc.Invoke(ctx, "/prototiger.ScadaService/SendControlCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scadaServiceClient) GetSystemSnapshot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SystemSnapshot, error) {
	out := new(SystemSnapshot)
	err := c.cc.Invoke(ctx, "/prototiger.ScadaService/GetSystemSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScadaServiceServer is the server API for ScadaService service.
// All implementations must embed UnimplementedScadaServiceServer
// for forward compatibility
type ScadaServiceServer interface {
	GetMonitoringData(context.Context, *MonitoringDataRequest) (*MonitoringDataResponse, error)
	SendControlCommand(context.Context, *ControlCommandRequest) (*ControlCommandResponse, error)
	GetSystemSnapshot(context.Context, *empty.Empty) (*SystemSnapshot, error)
	mustEmbedUnimplementedScadaServiceServer()
}

// UnimplementedScadaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScadaServiceServer struct {
}

func (UnimplementedScadaServiceServer) GetMonitoringData(context.Context, *MonitoringDataRequest) (*MonitoringDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitoringData not implemented")
}
func (UnimplementedScadaServiceServer) SendControlCommand(context.Context, *ControlCommandRequest) (*ControlCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendControlCommand not implemented")
}
func (UnimplementedScadaServiceServer) GetSystemSnapshot(context.Context, *empty.Empty) (*SystemSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemSnapshot not implemented")
}
func (UnimplementedScadaServiceServer) mustEmbedUnimplementedScadaServiceServer() {}

// UnsafeScadaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScadaServiceServer will
// result in compilation errors.
type UnsafeScadaServiceServer interface {
	mustEmbedUnimplementedScadaServiceServer()
}

func RegisterScadaServiceServer(s grpc.ServiceRegistrar, srv ScadaServiceServer) {
	s.RegisterService(&ScadaService_ServiceDesc, srv)
}

func _ScadaService_GetMonitoringData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoringDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScadaServiceServer).GetMonitoringData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prototiger.ScadaService/GetMonitoringData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScadaServiceServer).GetMonitoringData(ctx, req.(*MonitoringDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScadaService_SendControlCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScadaServiceServer).SendControlCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prototiger.ScadaService/SendControlCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScadaServiceServer).SendControlCommand(ctx, req.(*ControlCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScadaService_GetSystemSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScadaServiceServer).GetSystemSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prototiger.ScadaService/GetSystemSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScadaServiceServer).GetSystemSnapshot(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ScadaService_ServiceDesc is the grpc.ServiceDesc for ScadaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScadaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prototiger.ScadaService",
	HandlerType: (*ScadaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMonitoringData",
			Handler:    _ScadaService_GetMonitoringData_Handler,
		},
		{
			MethodName: "SendControlCommand",
			Handler:    _ScadaService_SendControlCommand_Handler,
		},
		{
			MethodName: "GetSystemSnapshot",
			Handler:    _ScadaService_GetSystemSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tiger.proto",
}
